// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIColor;

SWIFT_CLASS("_TtC9IOSCharts13GraphInputRow")
@interface GraphInputRow : NSObject

/// Set row name
@property (nonatomic, copy) NSString * _Nonnull name;

/// Set tint color for Row
@property (nonatomic, strong) UIColor * _Nonnull tintColor;

/// Array of values in a row
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull values;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name tintColor:(UIColor * _Nullable)tintColor;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name tintColor:(UIColor * _Nullable)tintColor values:(NSArray<NSNumber *> * _Nonnull)values OBJC_DESIGNATED_INITIALIZER;
@end



/// GraphInputTable plays the role of the data source for our graphs
SWIFT_CLASS("_TtC9IOSCharts15GraphInputTable")
@interface GraphInputTable : NSObject

/// Table name
@property (nonatomic, copy) NSString * _Nonnull name;

/// Array with all the column names
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull columnNames;

/// Array with all the rows in our data source
@property (nonatomic, copy) NSArray<GraphInputRow *> * _Nonnull rows;

/// Array with all the row names
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull rowNames;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name columnNames:(NSArray<NSString *> * _Nonnull)columnNames OBJC_DESIGNATED_INITIALIZER;

/// Append a new column with the values specified in the rowValues array.
///
/// \param columnName add a custom name to the column
///
/// \param rowValues each array element is appended to its corresponding row by index
- (void)addColumn:(NSString * _Nonnull)columnName rowValues:(NSArray<NSNumber *> * _Nonnull)rowValues;

/// Remove a column at the specified index
///
/// \param index index of column that needs to be deleted
- (void)removeColumnAtIndex:(NSInteger)index;

/// This will clean the entire data source
- (void)removeAllColumns;
@end

@class NSCoder;
@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC9IOSCharts13LineGraphView")
@interface LineGraphView : UIView

/// Change graph line smoothness by setting the curving value betweend 0.0 and 1.0, where 1.0 is the maximum smoothness
@property (nonatomic) float curving;

/// Data source for Line Graph
@property (nonatomic, strong) GraphInputTable * _Nullable inputTable;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)tableValuesDidChange:(GraphInputTable * _Nonnull)table;
- (void)tableColumnsDidChange:(GraphInputTable * _Nonnull)table;
- (void)tableRowsDidChange:(GraphInputTable * _Nonnull)table;
- (void)tableRowTintColorDidChange:(GraphInputTable * _Nonnull)table rowIndex:(NSInteger)rowIndex;
@end


SWIFT_CLASS("_TtC9IOSCharts12PieChartView")
@interface PieChartView : UIView

/// Data source for Pie Chart
@property (nonatomic, strong) GraphInputTable * _Nullable inputTable;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)tableValuesDidChange:(GraphInputTable * _Nonnull)table;
- (void)tableColumnsDidChange:(GraphInputTable * _Nonnull)table;
- (void)tableRowsDidChange:(GraphInputTable * _Nonnull)table;
- (void)tableRowTintColorDidChange:(GraphInputTable * _Nonnull)table rowIndex:(NSInteger)rowIndex;
@end


SWIFT_CLASS("_TtC9IOSCharts18SegmentedStackView")
@interface SegmentedStackView : UIView

/// Data source for Segmented Stack Graph
@property (nonatomic, strong) GraphInputTable * _Nullable inputTable;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)tableValuesDidChange:(GraphInputTable * _Nonnull)table;
- (void)tableColumnsDidChange:(GraphInputTable * _Nonnull)table;
- (void)tableRowsDidChange:(GraphInputTable * _Nonnull)table;
- (void)tableRowTintColorDidChange:(GraphInputTable * _Nonnull)table rowIndex:(NSInteger)rowIndex;
@end


@interface UIColor (SWIFT_EXTENSION(IOSCharts))

/// Create UIColor with RGB values and alpha
- (nonnull instancetype)initWithR:(NSInteger)r g:(NSInteger)g b:(NSInteger)b a:(CGFloat)a;

/// Create UIColor with a hex value and alpha
- (nonnull instancetype)initWithHex:(NSInteger)hex a:(CGFloat)a;

/// Determine a high contrast text color based on the background color
- (UIColor * _Nonnull)determineAReadableTextColor;
@end

#pragma clang diagnostic pop
